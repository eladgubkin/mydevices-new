Purpose: 
    - To be able to login and register through email and password.


What do we want exactly:
    - LOGIN:
        In the UI, we want a login form with "Email-Password-Submit", and "Login with Google".
    - REGISTER:
        Additionally, we have a register form with "Email", "Password", "Password again", ....
    - EXISTING ACCOUNT:
        If the user clicks "Login with Google", but his email is already registered, we want
        to assign the Google to his existing account, BUT only after he logins with his password!
    - USE GRAPHQL AS MUCH AS POSSIBLE FROM THE CLIENT
        Every request that is sent from the UI must be GraphQL.

Plan:

    - Change auth-service to a GraphQL microservice instead of HTTP

    - Add GraphQL API called loginWithGoogle.
                ApolloClient.query(gql`
                    mutation loginWithGoogle {
                        loginWithGoogle(idToken: ".....") {
                            <Our Own JWT Token>
                        }
                    }
                `)

    - Add GraphQL API called credentialsLogin
                ApolloClient.query(gql`
                    mutation loginWithCredentials {
                        loginWithCredentials(email: "...", password: "....) {
                            <Our Own JWT Token>
                        }
                    }
                `)


    - Change Hasura authentication mode to JWT

    - Every request from client to Hasura should have Authorization header with the JWT



Need to learn:

    - Remote Schemas in Hasura
    - Graphene & Flask-GraphQL



Steps for implementation (Login with Google):

    1. Change auth-service to a GraphQL server instead of HTTP server.

        The GraphQL server will provide a loginWithGoogle mutation like explained above.
            Input: Google ID Token
            Output: JWT Token

        First, create the mutation using Graphene:
            https://docs.graphene-python.org/en/latest/types/mutations/
        
        Then, create a schema from it:
            https://docs.graphene-python.org/en/latest/types/schema/

        Then, connect the schema to Flask:
            https://github.com/graphql-python/flask-graphql

        The output of the mutation should now be JWT token that we create:
            The secret key should be SUPER_SECRET_KEY. The encryption should be HS256.

        The JWT should contain the following data:

            "https://hasura.io/jwt/claims": {
                "x-hasura-allowed-roles": ["user"],
                "x-hasura-default-role": "user",
                "x-hasura-user-id": <USER-ID> (from db)
            }

        Test with Postman.


    2. Add auth-service as a Remote Schema to Hasura, from Hasura UI
            (mark "Forward all Headers")


    3. Configure Hasura to use JWT authentication. Add environment variables in docker-compose:

            HASURA_GRAPHQL_JWT_SECRET={"type": "HS256", "key": "SUPER_SECRET_KEY"}


    4. (CLIENT SIDE) Implement "Login with Google" in the frontend using the auth-service above.

        Use the following header:
            Authorization: Bearer <JWT>
        
        Tip: https://hasura.io/docs/1.0/graphql/manual/remote-schemas/index.html#bypassing-jwt-authorization